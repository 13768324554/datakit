(** Generate HTML for the various pages in the UI. *)

type logs =
  [ `Live_log of string * string option
  | `No_log
  | `Pair of logs * logs
  | `Saved_log of string * string * string ]

val pr_url : CI_projectID.t -> int -> string
(** [pr_url project pr] is a link to the page for [pr]. *)

val ref_url : CI_projectID.t -> Datakit_path.t -> string
(** [ref_url project ref] is a link to the page for [ref]. *)

val unescape_ref : string -> Datakit_path.t
(** [unescape_ref s] decodes a percent-encoded query parameter previously generated by these templates. *)

val login_page :
  csrf_token:string ->
  user:string option ->
  [> `Html ] Tyxml.Html.elt

val user_page :
  csrf_token:string ->
  user:string ->
  [> `Html ] Tyxml.Html.elt

val main_page :
  csrf_token:string ->
  ci:CI_engine.t ->
  dashboards:CI_target.ID_Set.t CI_projectID.Map.t ->
  user:string ->
  [> `Html ] Tyxml.Html.elt

val prs_page :
  ci:CI_engine.t ->
  user:string ->
  [> `Html ] Tyxml.Html.elt

val branches_page :
  ci:CI_engine.t ->
  user:string ->
  [> `Html ] Tyxml.Html.elt

val tags_page :
  ci:CI_engine.t ->
  user:string ->
  [> `Html ] Tyxml.Html.elt

val pr_page :
  csrf_token:string ->
  target:CI_engine.target ->
  (CI_engine.job * logs) list ->
  user:string ->
  [> `Html ] Tyxml.Html.elt

val ref_page :
  csrf_token:string ->
  target:CI_engine.target ->
  (CI_engine.job * logs) list ->
  user:string ->
  [> `Html ] Tyxml.Html.elt
